%% vim:ft=erlang:

{Target, IsDefaultTarget} =
case os:getenv("TARGET") of
    false ->
        Cfg = os:cmd("rustc --print cfg"),
        ReOpts = [{capture, all_but_first, list},
                  multiline],
        {match, [Arch]} = re:run(Cfg, "^target_arch=\"([^\"]+)\"", ReOpts),
        {match, [Vendor]} = re:run(Cfg, "^target_vendor=\"([^\"]+)\"", ReOpts),
        {match, [OS]} = re:run(Cfg, "^target_os=\"([^\"]+)\"", ReOpts),
        {match, [Env]} = re:run(Cfg, "^target_env=\"([^\"]*)\"", ReOpts),
        case Env of
            "" ->
                {lists:flatten(io_lib:format("~s-~s-~s", [Arch, Vendor, OS])),
                 true};
            _ ->
                {lists:flatten(io_lib:format("~s-~s-~s-~s", [Arch, Vendor, OS, Env])),
                 true}
        end;
    Value ->
        {Value, false}
end,

CrateName = "stdout_formatter_nifs",
CrateDir = filename:join("crates", CrateName),
CargoManifest = filename:join(CrateDir, "Cargo.toml"),
NifsLib = case IsDefaultTarget of
              true  -> filename:join([CrateDir, "target", "release",
                                      "lib" ++ CrateName]);
              false -> filename:join([CrateDir, "target", Target, "release",
                                      "lib" ++ CrateName])
          end,

PrivDir = filename:join("priv", Target),

CompileSteps = [{"mkdir -p '~s'", [PrivDir]},
                {"cargo build --release --target '~s' --manifest-path '~s'", [Target, CargoManifest]},
                {"echo cp -a '~s'.so '~s'", [NifsLib, PrivDir]}],
CleanSteps = [{"cargo clean --manifest-path '~s'", [CargoManifest]},
              {"rm -rf '~s'", [PrivDir]}],

CONFIG1 = [{pre_hooks,
            [{compile, lists:flatten(io_lib:format(Format, Args))}
             || {Format, Args} <- CompileSteps]},
           {post_hooks,
            [{clean, lists:flatten(io_lib:format(Format, Args))}
             || {Format, Args} <- CleanSteps]}
           | CONFIG],

case os:getenv("TRAVIS_JOB_ID") of
    false -> CONFIG1;
    JobId ->
        %% coveralls.io.
        [{plugins,
          [{coveralls,
            {git, "https://github.com/markusn/coveralls-erl",
             {branch, "master"}}}]},
         {coveralls_coverdata, "_build/test/cover/eunit.coverdata"},
         {coveralls_service_name, "travis-ci"},
         {coveralls_service_job_id, JobId}
         | CONFIG1
        ]
end.
